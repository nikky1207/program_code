5.1.Sum & Average of 1D Array
Codes:-

#include <stdio.h>

int main() {
    int arr[] = {12, 84, 20, 36, 64, 56, 72, 10, 45, 90};
    int len = sizeof(arr) / sizeof(arr[0]);
    int sum = 0;
    float avg;

    for(int i = 0; i < len; i++) {
        sum += arr[i];
    }
    avg = (float) sum / len;

    printf("Sum of array elements: %d\n", sum);
    printf("Average of array elements: %.2f\n", avg);

    return 0;
}
---------------------------------------------------------------------------------
5.2. Min & Max of 1D Array
codes:-

#include <stdio.h>

int main() {
   int arr[] = {64, 84, 20, 36, 12, 90, 72, 10, 45, 56};
   int len = sizeof(arr) / sizeof(arr[0]);
   int min = arr[0], max = arr[0];
   
   for(int i=1; i<len; i++) {
      if(arr[i] < min)
         min = arr[i];
      if(arr[i] > max)
         max = arr[i];
   }
   
   printf("Minimum element: %d\n", min);
   printf("Maximum element: %d\n", max);

   return 0;
}
---------------------------------------------------------------------------------
5.3.Reverse The Array
Codes:-

#include <stdio.h>

#define MAX_SIZE 100

int main()
{
    int arr[MAX_SIZE];
    int size, i, temp;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter the elements of the array: ");
    for(i=0; i<size; i++)
    {
        scanf("%d", &arr[i]);
    }

    /* Reverse the array */
    for(i=0; i<size/2; i++)
    {
        temp = arr[i];
        arr[i] = arr[size-i-1];
        arr[size-i-1] = temp;
    }

    printf("\nArray after reversing: ");
    for(i=0; i<size; i++)
    {
        printf("%d ", arr[i]);
    }

    return 0;
}
---------------------------------------------------------------------------------
5.4. Diff between even & odd elements
Codes:-

#include <stdio.h>

#define MAX_SIZE 100

int main()
{
    int arr[MAX_SIZE];
    int size, i, even_sum=0,odd_sum=0;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter the elements of the array: ");
    for(i=0; i<size; i++)
    {
        scanf("%d", &arr[i]);
    }
for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            even_sum += arr[i];
        } else {
            odd_sum += arr[i];
        }
    }

    int diff = even_sum - odd_sum;

    printf("The difference between the sum of even and odd elements in the array is: %d\n", diff);

    return 0;
}
---------------------------------------------------------------------------------
5.5.Diff between even & odd indexed elements
Codes:-

#include <stdio.h>

#define MAX_SIZE 100

int main()
{
    int arr[MAX_SIZE];
    int size, i, even_sum=0,odd_sum=0;

    printf("Enter the size of the array: ");
    scanf("%d", &size);

    printf("Enter the elements of the array: ");
    for(i=0; i<size; i++)
    {
        scanf("%d", &arr[i]);
    }
for (int i = 0; i < size; i++) {
        if (i % 2 == 0) {
            even_sum += arr[i];
        } else {
            odd_sum += arr[i];
        }
    }

    int diff = even_sum - odd_sum;

    printf("The difference between the sum of even-indexed and odd-indexed elements in the array is: %d\n", diff);

    return 0;
}
---------------------------------------------------------------------------------
5.6.Decimal to Binary/Octal/Hex Conversion
Codes:-

#include <stdio.h>

void decToBin(int num);
void decToOct(int num);
void decToHex(int num);

int main() {
    int num;

    printf("Enter a decimal number: ");
    scanf("%d", &num);

    decToBin(num);
    decToOct(num);
    decToHex(num);

    return 0;
}

void decToBin(int num) {
    int bin[100];
    int i = 0;

    while (num > 0) {
        bin[i] = num % 2;
        num = num / 2;
        i++;
    }

    printf("Binary No : ");

    for (int j = i - 1; j >= 0; j--) {
        printf("%d", bin[j]);
    }

    printf("\n");
}

void decToOct(int num) {
    int oct[100];
    int i = 0;

    while (num > 0) {
        oct[i] = num % 8;
        num = num / 8;
        i++;
    }

    printf("Octal No : ");

    for (int j = i - 1; j >= 0; j--) {
        printf("%d", oct[j]);
    }

    printf("\n");
}

void decToHex(int num) {
    char hex[100];
    int i = 0;

    while (num > 0) {
        int remainder = num % 16;

        if (remainder < 10) {
            hex[i] = remainder + '0';
        } else {
            hex[i] = remainder + 55;
        }

        num = num / 16;
        i++;
    }

    printf("Hex No : ");

    for (int j = i - 1; j >= 0; j--) {
        printf("%c", hex[j]);
    }

    printf("\n");
}
---------------------------------------------------------------------------------
5.7. Binary/Octal/Hex to Decimal Conversion
Codes:-

#include <stdio.h>
#include <math.h>

void binToDec(int num);
void octToDec(int num);
void hexToDec(char *num);

int main() {
    int choice;
    char num[100];

    printf("Enter a number: ");
    scanf("%s", num);

    printf("Enter 1 to convert from binary to decimal\n");
    printf("Enter 2 to convert from octal to decimal\n");
    printf("Enter 3 to convert from hexadecimal to decimal\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            binToDec(num);
            break;
        case 2:
            octToDec(num);
            break;
        case 3:
            hexToDec(num);
            break;
        default:
            printf("Invalid choice\n");
            break;
    }

    return 0;
}

void binToDec(int num) {
    int dec = 0;
    int i = 0;

    while (num > 0) {
        int digit = num % 10;
        dec += digit * pow(2, i);
        num = num / 10;
        i++;
    }

    printf("Decimal No : %d\n", dec);
}

void octToDec(int num) {
    int dec = 0;
    int i = 0;

    while (num > 0) {
        int digit = num % 10;
        dec += digit * pow(8, i);
        num = num / 10;
        i++;
    }

    printf("Decimal No : %d\n", dec);
}

void hexToDec(char *num) {
    int dec = 0;
    int i = 0;

    while (num[i] != '\0') {
        int digit;

        if (num[i] >= '0' && num[i] <= '9') {
            digit = num[i] - '0';
        } else if (num[i] >= 'A' && num[i] <= 'F') {
            digit = num[i] - 'A' + 10;
        } else if (num[i] >= 'a' && num[i] <= 'f') {
            digit = num[i] - 'a' + 10;
        } else {
            printf("Invalid hexadecimal number\n");
            return;
        }

        dec += digit * pow(16, strlen(num) - i - 1);
        i++;
    }

    printf("Decimal No : %d\n", dec);
}
---------------------------------------------------------------------------------
5.9. No.of Days Elapsed
Codes:-

#include <stdio.h>

int daysElapsed(int day, int month, int year);

int main() {
    int day, month, year;

    printf("Enter a date in the format DDMMYY: ");
    scanf("%2d%2d%2d", &day, &month, &year);

    int days = daysElapsed(day, month, year);

    printf("Number of days elapsed: %d\n", days);

    return 0;
}

int daysElapsed(int day, int month, int year) {
    int days = day;

    int daysInMonth[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
        daysInMonth[2] = 29;
    }

    for (int i = 1; i < month; i++) {
        days += daysInMonth[i];
    }

    int baseYear = 1900;
    int yearsElapsed = year - baseYear;

    int leapYears = (yearsElapsed + 3) / 4;

    int nonLeapYears = yearsElapsed - leapYears;

    days += nonLeapYears * 365 + leapYears * 366;

    return days;
}
---------------------------------------------------------------------------------
5.12(a).Array Sorting -Bubble Sort
Codes:-

#include <stdio.h>

void bubbleSort(int arr[], int n);

int main() {
    int n;

    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter the elements of the array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    bubbleSort(arr, n);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }

    return 0;
}

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

---------------------------------------------------------------------------------
5.13(a). Linear Search
Codes:-

#include <stdio.h>

int linearSearch(int arr[], int n, int x);

int main() {
    int n, x;

    printf("Enter the size of the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter the elements of the array: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the element to search for: ");
    scanf("%d", &x);

    int index = linearSearch(arr, n, x);

    if (index == -1) {
        printf("%d not found in the array\n", x);
    } else {
        printf("%d found at index %d\n", x, index);
    }

    return 0;
}

int linearSearch(int arr[], int n, int x) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == x) {
            return i;
        }
    }
    return -1;
}